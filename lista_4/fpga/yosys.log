
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4008 (git sha1 83fc5cc2, clang 7.0.1-8+deb10u2 -fPIC -Os)


-- Parsing `src/stoper.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: src/stoper.v
Parsing Verilog input from `src/stoper.v' to AST representation.
Generating RTLIL representation for module `\stoper'.
Successfully finished Verilog frontend.

-- Parsing `src/displaydriver.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: src/displaydriver.v
Parsing Verilog input from `src/displaydriver.v' to AST representation.
Generating RTLIL representation for module `\raw_display_driver'.
Warning: reg '\digit' is assigned in a continuous assignment at src/displaydriver.v:76.12-83.50.
Successfully finished Verilog frontend.

-- Parsing `src/bcdop.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: src/bcdop.v
Parsing Verilog input from `src/bcdop.v' to AST representation.
Generating RTLIL representation for module `\bcd_aug'.
Successfully finished Verilog frontend.

-- Parsing `src/volatile_bcd.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: src/volatile_bcd.v
Parsing Verilog input from `src/volatile_bcd.v' to AST representation.
Generating RTLIL representation for module `\volatile_bcd'.
Successfully finished Verilog frontend.

-- Parsing `src/aggregator.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend: src/aggregator.v
Parsing Verilog input from `src/aggregator.v' to AST representation.
Generating RTLIL representation for module `\aggregator'.
Successfully finished Verilog frontend.

-- Parsing `src/calc.v' using frontend `verilog' --

6. Executing Verilog-2005 frontend: src/calc.v
Parsing Verilog input from `src/calc.v' to AST representation.
Generating RTLIL representation for module `\calc'.
Warning: Replacing memory \mulkeep with list of registers. See src/calc.v:75
Successfully finished Verilog frontend.

-- Parsing `src/bcdmapper.v' using frontend `verilog' --

7. Executing Verilog-2005 frontend: src/bcdmapper.v
Parsing Verilog input from `src/bcdmapper.v' to AST representation.
Generating RTLIL representation for module `\bcdmapper'.
Successfully finished Verilog frontend.

-- Parsing `src/pwm.v' using frontend `verilog' --

8. Executing Verilog-2005 frontend: src/pwm.v
Parsing Verilog input from `src/pwm.v' to AST representation.
Generating RTLIL representation for module `\pwm'.
Successfully finished Verilog frontend.

-- Parsing `src/pwm_feeder.v' using frontend `verilog' --

9. Executing Verilog-2005 frontend: src/pwm_feeder.v
Parsing Verilog input from `src/pwm_feeder.v' to AST representation.
Generating RTLIL representation for module `\pwm_feeder'.
Successfully finished Verilog frontend.

-- Parsing `src/numdriver.v' using frontend `verilog' --

10. Executing Verilog-2005 frontend: src/numdriver.v
Parsing Verilog input from `src/numdriver.v' to AST representation.
Generating RTLIL representation for module `\numdriver'.
Warning: reg '\digit' is assigned in a continuous assignment at src/numdriver.v:43.12-50.50.
Successfully finished Verilog frontend.

-- Parsing `src/bcd.v' using frontend `verilog' --

11. Executing Verilog-2005 frontend: src/bcd.v
Parsing Verilog input from `src/bcd.v' to AST representation.
Generating RTLIL representation for module `\BCDC'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top calc -json calc.json' --

12. Executing SYNTH_ICE40 pass.

12.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

12.2. Executing HIERARCHY pass (managing design hierarchy).

12.2.1. Analyzing design hierarchy..
Top module:  \calc
Used module:     \numdriver
Used module:         \bcdmapper
Used module:     \aggregator
Used module:         \bcd_aug
Used module:     \volatile_bcd

12.2.2. Analyzing design hierarchy..
Top module:  \calc
Used module:     \numdriver
Used module:         \bcdmapper
Used module:     \aggregator
Used module:         \bcd_aug
Used module:     \volatile_bcd
Removing unused module `\BCDC'.
Removing unused module `\pwm_feeder'.
Removing unused module `\pwm'.
Removing unused module `\raw_display_driver'.
Removing unused module `\stoper'.
Removed 5 unused modules.

12.3. Executing PROC pass (convert processes to netlists).

12.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

12.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$805 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$798 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$794 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$787 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$784 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$781 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$778 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$775 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$767 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$760 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$756 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$749 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$746 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$743 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$740 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$737 in module SB_DFFSR.
Marked 2 switch rules as full_case in process $proc$src/numdriver.v:54$548 in module numdriver.
Marked 9 switch rules as full_case in process $proc$src/calc.v:28$177 in module calc.
Marked 1 switch rules as full_case in process $proc$src/bcdop.v:28$171 in module bcd_aug.
Removed a total of 0 dead cases.

12.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 8 redundant assignments.
Promoted 22 assignments to connections.

12.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$808'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$804'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$797'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$793'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$786'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$783'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$780'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$777'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$774'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$772'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$770'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$766'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$759'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$755'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$748'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$745'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$742'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$739'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$736'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$734'.
  Set init value: \Q = 1'0

12.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$805'.
Found async reset \R in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$794'.
Found async reset \S in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$784'.
Found async reset \R in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$778'.
Found async reset \S in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$767'.
Found async reset \R in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$756'.
Found async reset \S in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$746'.
Found async reset \R in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$740'.

12.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$808'.
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$805'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$804'.
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$798'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$797'.
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$794'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$793'.
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$787'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$786'.
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$784'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$783'.
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$781'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$780'.
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$778'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$777'.
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$775'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$774'.
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:866$773'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$772'.
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:830$771'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$770'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$767'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$766'.
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$760'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$759'.
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$756'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$755'.
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$749'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$748'.
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$746'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$745'.
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$743'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$742'.
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$740'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$739'.
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$737'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$736'.
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:289$735'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$734'.
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:253$733'.
Creating decoders for process `\numdriver.$proc$src/numdriver.v:54$548'.
     1/4: $0\sseg[7:0] [7]
     2/4: $0\sseg[7:0] [6:0]
     3/4: $0\multiplex[2:0]
     4/4: $0\pp[7:0]
Creating decoders for process `\calc.$proc$src/calc.v:28$177'.
     1/18: $0\mulkeep[3][3:0]
     2/18: $0\mulkeep[2][3:0]
     3/18: $0\mulkeep[1][3:0]
     4/18: $0\mulkeep[0][3:0]
     5/18: $0\pre3[0:0]
     6/18: $0\pre2[0:0]
     7/18: $0\pre1[0:0]
     8/18: $0\mulvalue[8:0]
     9/18: $0\aux3_history[8:0]
    10/18: $0\aux2_history[8:0]
    11/18: $0\aux1_history[8:0]
    12/18: $0\zero[0:0]
    13/18: $0\mk_mul[0:0]
    14/18: $0\mk_sub[0:0]
    15/18: $0\mk_add[0:0]
    16/18: $0\do_sub[0:0]
    17/18: $0\do_add[0:0]
    18/18: $0\pp[14:0]
Creating decoders for process `\bcd_aug.$proc$src/bcdop.v:28$171'.
     1/1: $0\bcd_me[3:0]

12.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

12.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$805'.
  created $adff cell `$procdff$1352' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$798'.
  created $dff cell `$procdff$1353' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$794'.
  created $adff cell `$procdff$1354' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$787'.
  created $dff cell `$procdff$1355' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$784'.
  created $adff cell `$procdff$1356' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$781'.
  created $dff cell `$procdff$1357' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$778'.
  created $adff cell `$procdff$1358' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$775'.
  created $dff cell `$procdff$1359' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:866$773'.
  created $dff cell `$procdff$1360' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:830$771'.
  created $dff cell `$procdff$1361' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$767'.
  created $adff cell `$procdff$1362' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$760'.
  created $dff cell `$procdff$1363' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$756'.
  created $adff cell `$procdff$1364' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$749'.
  created $dff cell `$procdff$1365' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$746'.
  created $adff cell `$procdff$1366' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$743'.
  created $dff cell `$procdff$1367' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$740'.
  created $adff cell `$procdff$1368' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$737'.
  created $dff cell `$procdff$1369' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:289$735'.
  created $dff cell `$procdff$1370' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:253$733'.
  created $dff cell `$procdff$1371' with positive edge clock.
Creating register for signal `\numdriver.\sseg' using process `\numdriver.$proc$src/numdriver.v:54$548'.
  created $dff cell `$procdff$1372' with positive edge clock.
Creating register for signal `\numdriver.\multiplex' using process `\numdriver.$proc$src/numdriver.v:54$548'.
  created $dff cell `$procdff$1373' with positive edge clock.
Creating register for signal `\numdriver.\pp' using process `\numdriver.$proc$src/numdriver.v:54$548'.
  created $dff cell `$procdff$1374' with positive edge clock.
Creating register for signal `\calc.\pp' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1375' with positive edge clock.
Creating register for signal `\calc.\do_add' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1376' with positive edge clock.
Creating register for signal `\calc.\do_sub' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1377' with positive edge clock.
Creating register for signal `\calc.\mk_add' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1378' with positive edge clock.
Creating register for signal `\calc.\mk_sub' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1379' with positive edge clock.
Creating register for signal `\calc.\mk_mul' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1380' with positive edge clock.
Creating register for signal `\calc.\zero' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1381' with positive edge clock.
Creating register for signal `\calc.\aux1_history' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1382' with positive edge clock.
Creating register for signal `\calc.\aux2_history' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1383' with positive edge clock.
Creating register for signal `\calc.\aux3_history' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1384' with positive edge clock.
Creating register for signal `\calc.\mulvalue' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1385' with positive edge clock.
Creating register for signal `\calc.\pre1' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1386' with positive edge clock.
Creating register for signal `\calc.\pre2' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1387' with positive edge clock.
Creating register for signal `\calc.\pre3' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1388' with positive edge clock.
Creating register for signal `\calc.\mulkeep[0]' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1389' with positive edge clock.
Creating register for signal `\calc.\mulkeep[1]' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1390' with positive edge clock.
Creating register for signal `\calc.\mulkeep[2]' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1391' with positive edge clock.
Creating register for signal `\calc.\mulkeep[3]' using process `\calc.$proc$src/calc.v:28$177'.
  created $dff cell `$procdff$1392' with positive edge clock.
Creating register for signal `\bcd_aug.\bcd_me' using process `\bcd_aug.$proc$src/bcdop.v:28$171'.
  created $dff cell `$procdff$1393' with positive edge clock.

12.3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

12.3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$808'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$805'.
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$805'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$804'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$798'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$798'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$797'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$794'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$794'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$793'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$787'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$787'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$786'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$784'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$783'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$781'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$781'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$780'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$778'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$777'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$775'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$775'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$774'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:866$773'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:866$773'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$772'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:830$771'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$770'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$767'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$767'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$766'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$760'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$760'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$759'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$756'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$756'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$755'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$749'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$749'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$748'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$746'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$745'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$743'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$743'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$742'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$740'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$739'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$737'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$737'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$736'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:289$735'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:289$735'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$734'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:253$733'.
Found and cleaned up 3 empty switches in `\numdriver.$proc$src/numdriver.v:54$548'.
Removing empty process `numdriver.$proc$src/numdriver.v:54$548'.
Found and cleaned up 18 empty switches in `\calc.$proc$src/calc.v:28$177'.
Removing empty process `calc.$proc$src/calc.v:28$177'.
Found and cleaned up 3 empty switches in `\bcd_aug.$proc$src/bcdop.v:28$171'.
Removing empty process `bcd_aug.$proc$src/bcdop.v:28$171'.
Cleaned up 42 empty switches.

12.4. Executing FLATTEN pass (flatten design).
Deleting now unused module numdriver.
Deleting now unused module bcdmapper.
Deleting now unused module aggregator.
Deleting now unused module volatile_bcd.
Deleting now unused module bcd_aug.
<suppressed ~15 debug messages>

12.5. Executing TRIBUF pass.

12.6. Executing DEMINOUT pass (demote inout ports to input or output).

12.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.
<suppressed ~240 debug messages>

12.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..
Removed 19 unused cells and 407 unused wires.
<suppressed ~108 debug messages>

12.9. Executing CHECK pass (checking for obvious problems).
Checking module calc...
Found and reported 0 problems.

12.10. Executing OPT pass (performing simple optimizations).

12.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
<suppressed ~117 debug messages>
Removed a total of 39 cells.

12.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$1241: \mk_sub -> 1'0
      Replacing known input bits on port A of cell $procmux$1262: \mk_add -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

12.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \calc.
    New ctrl vector for $mux cell $procmux$1241: { }
    New ctrl vector for $mux cell $procmux$1262: { }
    New ctrl vector for $mux cell $procmux$1328: { }
    New ctrl vector for $mux cell $procmux$1331: { }
    New ctrl vector for $mux cell $procmux$1334: { }
    New ctrl vector for $mux cell $procmux$1337: { }
  Optimizing cells in module \calc.
Performed a total of 6 changes.

12.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.10.6. Executing OPT_DFF pass (perform DFF optimizations).

12.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..
Removed 0 unused cells and 45 unused wires.
<suppressed ~1 debug messages>

12.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.10.9. Rerunning OPT passes. (Maybe there is more to do..)

12.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

12.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \calc.
Performed a total of 0 changes.

12.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.10.13. Executing OPT_DFF pass (perform DFF optimizations).

12.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.10.16. Finished OPT passes. (There is nothing left to do.)

12.11. Executing FSM pass (extract and optimize FSM).

12.11.1. Executing FSM_DETECT pass (finding FSMs in design).

12.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

12.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

12.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

12.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

12.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

12.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

12.12. Executing OPT pass (performing simple optimizations).

12.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

12.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \calc.
Performed a total of 0 changes.

12.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1392 ($dff) from module calc (D = \agg.l4.bcd_me, Q = \mulkeep[3]).
Adding EN signal on $procdff$1391 ($dff) from module calc (D = \agg.l3.bcd_me, Q = \mulkeep[2]).
Adding EN signal on $procdff$1390 ($dff) from module calc (D = \agg.l2.bcd_me, Q = \mulkeep[1]).
Adding EN signal on $procdff$1389 ($dff) from module calc (D = \agg.l1.bcd_me, Q = \mulkeep[0]).
Adding EN signal on $procdff$1388 ($dff) from module calc (D = $procmux$1102_Y, Q = \pre3).
Adding SRST signal on $auto$opt_dff.cc:764:run$1446 ($dffe) from module calc (D = $procmux$1100_Y, Q = \pre3, rval = 1'1).
Adding EN signal on $procdff$1387 ($dff) from module calc (D = $procmux$1118_Y, Q = \pre2).
Adding SRST signal on $auto$opt_dff.cc:764:run$1456 ($dffe) from module calc (D = $procmux$1116_Y, Q = \pre2, rval = 1'1).
Adding EN signal on $procdff$1386 ($dff) from module calc (D = $procmux$1134_Y, Q = \pre1).
Adding SRST signal on $auto$opt_dff.cc:764:run$1466 ($dffe) from module calc (D = $procmux$1132_Y, Q = \pre1, rval = 1'1).
Adding SRST signal on $procdff$1385 ($dff) from module calc (D = $procmux$1165_Y, Q = \mulvalue, rval = 9'000000000).
Adding EN signal on $auto$opt_dff.cc:702:run$1468 ($sdff) from module calc (D = $procmux$1165_Y, Q = \mulvalue).
Adding EN signal on $procdff$1384 ($dff) from module calc (D = { \aux3_history [7:0] \aux3 }, Q = \aux3_history).
Adding EN signal on $procdff$1383 ($dff) from module calc (D = { \aux2_history [7:0] \aux2 }, Q = \aux2_history).
Adding EN signal on $procdff$1382 ($dff) from module calc (D = { \aux1_history [7:0] \aux1 }, Q = \aux1_history).
Adding SRST signal on $procdff$1381 ($dff) from module calc (D = $procmux$1212_Y, Q = \zero, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1497 ($sdff) from module calc (D = $procmux$1212_Y, Q = \zero).
Adding SRST signal on $procdff$1380 ($dff) from module calc (D = $procmux$1235_Y, Q = \mk_mul, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1511 ($sdff) from module calc (D = $procmux$1235_Y, Q = \mk_mul).
Adding SRST signal on $procdff$1379 ($dff) from module calc (D = $procmux$1256_Y, Q = \mk_sub, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1525 ($sdff) from module calc (D = $procmux$1250_Y, Q = \mk_sub).
Adding SRST signal on $procdff$1378 ($dff) from module calc (D = $procmux$1277_Y, Q = \mk_add, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1537 ($sdff) from module calc (D = $procmux$1271_Y, Q = \mk_add).
Adding SRST signal on $procdff$1377 ($dff) from module calc (D = $procmux$1297_Y, Q = \do_sub, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1549 ($sdff) from module calc (D = $procmux$1288_Y, Q = \do_sub).
Adding SRST signal on $procdff$1376 ($dff) from module calc (D = $procmux$1322_Y, Q = \do_add, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1563 ($sdff) from module calc (D = $procmux$1322_Y, Q = \do_add).
Adding SRST signal on $procdff$1375 ($dff) from module calc (D = $procmux$1340_Y, Q = \pp, rval = 15'000000000000000).
Adding EN signal on $auto$opt_dff.cc:702:run$1579 ($sdff) from module calc (D = $add$src/calc.v:101$221_Y, Q = \pp).
Adding SRST signal on $flatten\n.$procdff$1374 ($dff) from module calc (D = $flatten\n.$procmux$1014_Y, Q = \n.pp, rval = 8'00000000).
Adding EN signal on $auto$opt_dff.cc:702:run$1581 ($sdff) from module calc (D = $flatten\n.$procmux$1014_Y, Q = \n.pp).
Adding SRST signal on $flatten\n.$procdff$1373 ($dff) from module calc (D = $flatten\n.$procmux$1006_Y, Q = \n.multiplex, rval = 3'000).
Adding EN signal on $auto$opt_dff.cc:702:run$1585 ($sdff) from module calc (D = $flatten\n.$add$src/numdriver.v:61$552_Y, Q = \n.multiplex).
Adding EN signal on $flatten\n.$procdff$1372 ($dff) from module calc (D = { $flatten\n.$eq$src/numdriver.v:65$555_Y \n.ech [1] \n.ech [2] \n.ech [3] \n.ech [4] \n.ech [5] \n.ech [6] \n.ech [7] }, Q = \n.sseg).
Adding SRST signal on $auto$opt_dff.cc:764:run$1591 ($dffe) from module calc (D = { $flatten\n.$ternary$src/numdriver.v:34$516_Y [1] $flatten\n.$ternary$src/numdriver.v:34$516_Y [2] $flatten\n.$ternary$src/numdriver.v:34$516_Y [3] $flatten\n.$ternary$src/numdriver.v:34$516_Y [4] $flatten\n.$ternary$src/numdriver.v:34$516_Y [5] $flatten\n.$ternary$src/numdriver.v:34$516_Y [6] $flatten\n.$ternary$src/numdriver.v:34$516_Y [7] }, Q = \n.sseg [6:0], rval = 7'0000000).
Adding SRST signal on $flatten\agg.\l4.$procdff$1393 ($dff) from module calc (D = $flatten\agg.\l4.$procmux$1347_Y, Q = \agg.l4.bcd_me, rval = 4'0000).
Adding EN signal on $auto$opt_dff.cc:702:run$1593 ($sdff) from module calc (D = $flatten\agg.\l4.$procmux$1347_Y, Q = \agg.l4.bcd_me).
Adding SRST signal on $flatten\agg.\l3.$procdff$1393 ($dff) from module calc (D = $flatten\agg.\l3.$procmux$1347_Y, Q = \agg.l3.bcd_me, rval = 4'0000).
Adding EN signal on $auto$opt_dff.cc:702:run$1597 ($sdff) from module calc (D = $flatten\agg.\l3.$procmux$1347_Y, Q = \agg.l3.bcd_me).
Adding SRST signal on $flatten\agg.\l2.$procdff$1393 ($dff) from module calc (D = $flatten\agg.\l2.$procmux$1347_Y, Q = \agg.l2.bcd_me, rval = 4'0000).
Adding EN signal on $auto$opt_dff.cc:702:run$1601 ($sdff) from module calc (D = $flatten\agg.\l2.$procmux$1347_Y, Q = \agg.l2.bcd_me).
Adding SRST signal on $flatten\agg.\l1.$procdff$1393 ($dff) from module calc (D = $flatten\agg.\l1.$procmux$1347_Y, Q = \agg.l1.bcd_me, rval = 4'0000).
Adding EN signal on $auto$opt_dff.cc:702:run$1605 ($sdff) from module calc (D = $flatten\agg.\l1.$procmux$1347_Y, Q = \agg.l1.bcd_me).

12.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..
Removed 82 unused cells and 82 unused wires.
<suppressed ~85 debug messages>

12.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.
<suppressed ~15 debug messages>

12.12.9. Rerunning OPT passes. (Maybe there is more to do..)

12.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

12.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \calc.
Performed a total of 0 changes.

12.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
<suppressed ~147 debug messages>
Removed a total of 49 cells.

12.12.13. Executing OPT_DFF pass (perform DFF optimizations).

12.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..
Removed 0 unused cells and 49 unused wires.
<suppressed ~1 debug messages>

12.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.12.16. Rerunning OPT passes. (Maybe there is more to do..)

12.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

12.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \calc.
Performed a total of 0 changes.

12.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.12.20. Executing OPT_DFF pass (perform DFF optimizations).

12.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.12.23. Finished OPT passes. (There is nothing left to do.)

12.13. Executing WREDUCE pass (reducing word size of cells).
Removed cell calc.$procmux$1132 ($mux).
Removed cell calc.$procmux$1116 ($mux).
Removed cell calc.$procmux$1267 ($mux).
Removed cell calc.$procmux$1100 ($mux).
Removed cell calc.$procmux$1246 ($mux).
Removed cell calc.$procmux$1243 ($mux).
Removed cell calc.$procmux$1229 ($mux).
Removed cell calc.$procmux$1226 ($mux).
Removed cell calc.$procmux$1224 ($mux).
Removed cell calc.$procmux$1219 ($mux).
Removed cell calc.$procmux$1210 ($mux).
Removed cell calc.$procmux$1206 ($mux).
Removed cell calc.$procmux$1203 ($mux).
Removed cell calc.$procmux$1201 ($mux).
Removed cell calc.$procmux$1199 ($mux).
Removed cell calc.$procmux$1163 ($mux).
Removed cell calc.$procmux$1159 ($mux).
Removed cell calc.$procmux$1156 ($mux).
Removed cell calc.$procmux$1154 ($mux).
Removed cell calc.$procmux$1149 ($mux).
Removed top 31 bits (of 32) from port B of cell calc.$gt$src/calc.v:39$179 ($gt).
Removed top 31 bits (of 32) from port B of cell calc.$gt$src/calc.v:40$180 ($gt).
Removed top 14 bits (of 15) from port B of cell calc.$eq$src/calc.v:55$186 ($eq).
Removed top 5 bits (of 8) from port A of cell calc.$mul$src/calc.v:62$203 ($mul).
Removed top 1 bits (of 8) from port Y of cell calc.$mul$src/calc.v:62$203 ($mul).
Removed top 1 bits (of 9) from port A of cell calc.$add$src/calc.v:62$204 ($add).
Removed top 8 bits (of 9) from port B of cell calc.$eq$src/calc.v:68$208 ($eq).
Removed top 28 bits (of 31) from port A of cell calc.$mul$src/calc.v:73$209 ($mul).
Removed top 24 bits (of 31) from port Y of cell calc.$mul$src/calc.v:73$209 ($mul).
Removed top 24 bits (of 32) from port A of cell calc.$add$src/calc.v:73$210 ($add).
Removed top 23 bits (of 32) from port Y of cell calc.$add$src/calc.v:73$210 ($add).
Removed top 22 bits (of 32) from port A of cell calc.$sub$src/calc.v:73$212 ($sub).
Removed top 7 bits (of 9) from port B of cell calc.$sub$src/calc.v:73$212 ($sub).
Removed top 23 bits (of 32) from port Y of cell calc.$sub$src/calc.v:73$212 ($sub).
Removed top 1 bits (of 10) from port A of cell calc.$sub$src/calc.v:73$212 ($sub).
Removed top 13 bits (of 15) from port B of cell calc.$eq$src/calc.v:85$216 ($eq).
Removed top 13 bits (of 15) from port B of cell calc.$eq$src/calc.v:98$220 ($eq).
Removed cell calc.$procmux$1320 ($mux).
Removed cell calc.$procmux$1318 ($mux).
Removed cell calc.$procmux$1314 ($mux).
Removed cell calc.$procmux$1311 ($mux).
Removed cell calc.$procmux$1306 ($mux).
Removed cell calc.$procmux$1286 ($mux).
Removed cell calc.$procmux$1283 ($mux).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l4.$ge$src/bcdop.v:23$156 ($ge).
Removed top 1 bits (of 2) from port B of cell calc.$auto$opt_dff.cc:218:make_patterns_logic$1478 ($ne).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l4.$sub$src/bcdop.v:24$159 ($sub).
Removed top 1 bits (of 5) from mux cell calc.$flatten\agg.\l4.$ternary$src/bcdop.v:24$162 ($mux).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l4.$add$src/bcdop.v:26$165 ($add).
Removed top 1 bits (of 5) from mux cell calc.$flatten\agg.\l4.$ternary$src/bcdop.v:26$170 ($mux).
Removed cell calc.$flatten\agg.\l4.$procmux$1345 ($mux).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l3.$ge$src/bcdop.v:23$156 ($ge).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l3.$sub$src/bcdop.v:24$159 ($sub).
Removed top 1 bits (of 5) from mux cell calc.$flatten\agg.\l3.$ternary$src/bcdop.v:24$162 ($mux).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l3.$add$src/bcdop.v:26$165 ($add).
Removed top 1 bits (of 5) from mux cell calc.$flatten\agg.\l3.$ternary$src/bcdop.v:26$170 ($mux).
Removed cell calc.$flatten\agg.\l3.$procmux$1345 ($mux).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l2.$ge$src/bcdop.v:23$156 ($ge).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l2.$sub$src/bcdop.v:24$159 ($sub).
Removed top 1 bits (of 5) from mux cell calc.$flatten\agg.\l2.$ternary$src/bcdop.v:24$162 ($mux).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l2.$add$src/bcdop.v:26$165 ($add).
Removed top 1 bits (of 5) from mux cell calc.$flatten\agg.\l2.$ternary$src/bcdop.v:26$170 ($mux).
Removed cell calc.$flatten\agg.\l2.$procmux$1345 ($mux).
Removed top 1 bits (of 5) from port A of cell calc.$flatten\agg.\l1.$add$src/bcdop.v:23$155 ($add).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l1.$ge$src/bcdop.v:23$156 ($ge).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l1.$sub$src/bcdop.v:24$159 ($sub).
Removed top 1 bits (of 5) from mux cell calc.$flatten\agg.\l1.$ternary$src/bcdop.v:24$162 ($mux).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l1.$add$src/bcdop.v:26$165 ($add).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l1.$sub$src/bcdop.v:26$167 ($sub).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l1.$sub$src/bcdop.v:26$169 ($sub).
Removed top 1 bits (of 5) from mux cell calc.$flatten\agg.\l1.$ternary$src/bcdop.v:26$170 ($mux).
Removed cell calc.$flatten\agg.\l1.$procmux$1345 ($mux).
Removed top 2 bits (of 3) from port B of cell calc.$auto$opt_dff.cc:218:make_patterns_logic$1541 ($ne).
Removed top 2 bits (of 3) from port B of cell calc.$auto$opt_dff.cc:218:make_patterns_logic$1529 ($ne).
Removed top 1 bits (of 5) from port B of cell calc.$auto$opt_dff.cc:218:make_patterns_logic$1503 ($ne).
Removed top 3 bits (of 4) from port B of cell calc.$flatten\n.\b8.$eq$src/bcdmapper.v:7$230 ($eq).
Removed top 2 bits (of 4) from port B of cell calc.$flatten\n.\b8.$eq$src/bcdmapper.v:8$232 ($eq).
Removed top 2 bits (of 4) from port B of cell calc.$flatten\n.\b8.$eq$src/bcdmapper.v:9$234 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b8.$eq$src/bcdmapper.v:10$236 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b8.$eq$src/bcdmapper.v:11$238 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b8.$eq$src/bcdmapper.v:12$240 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b8.$eq$src/bcdmapper.v:13$242 ($eq).
Removed top 3 bits (of 4) from port B of cell calc.$flatten\n.\b7.$eq$src/bcdmapper.v:7$230 ($eq).
Removed top 2 bits (of 4) from port B of cell calc.$flatten\n.\b7.$eq$src/bcdmapper.v:8$232 ($eq).
Removed top 2 bits (of 4) from port B of cell calc.$flatten\n.\b7.$eq$src/bcdmapper.v:9$234 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b7.$eq$src/bcdmapper.v:10$236 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b7.$eq$src/bcdmapper.v:11$238 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b7.$eq$src/bcdmapper.v:12$240 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b7.$eq$src/bcdmapper.v:13$242 ($eq).
Removed top 3 bits (of 4) from port B of cell calc.$flatten\n.\b5.$eq$src/bcdmapper.v:7$230 ($eq).
Removed top 2 bits (of 4) from port B of cell calc.$flatten\n.\b5.$eq$src/bcdmapper.v:8$232 ($eq).
Removed top 2 bits (of 4) from port B of cell calc.$flatten\n.\b5.$eq$src/bcdmapper.v:9$234 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b5.$eq$src/bcdmapper.v:10$236 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b5.$eq$src/bcdmapper.v:11$238 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b5.$eq$src/bcdmapper.v:12$240 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b5.$eq$src/bcdmapper.v:13$242 ($eq).
Removed top 3 bits (of 4) from port B of cell calc.$flatten\n.\b4.$eq$src/bcdmapper.v:7$230 ($eq).
Removed top 2 bits (of 4) from port B of cell calc.$flatten\n.\b4.$eq$src/bcdmapper.v:8$232 ($eq).
Removed top 2 bits (of 4) from port B of cell calc.$flatten\n.\b4.$eq$src/bcdmapper.v:9$234 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b4.$eq$src/bcdmapper.v:10$236 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b4.$eq$src/bcdmapper.v:11$238 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b4.$eq$src/bcdmapper.v:12$240 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b4.$eq$src/bcdmapper.v:13$242 ($eq).
Removed top 3 bits (of 4) from port B of cell calc.$flatten\n.\b3.$eq$src/bcdmapper.v:7$230 ($eq).
Removed top 2 bits (of 4) from port B of cell calc.$flatten\n.\b3.$eq$src/bcdmapper.v:8$232 ($eq).
Removed top 2 bits (of 4) from port B of cell calc.$flatten\n.\b3.$eq$src/bcdmapper.v:9$234 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b3.$eq$src/bcdmapper.v:10$236 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b3.$eq$src/bcdmapper.v:11$238 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b3.$eq$src/bcdmapper.v:12$240 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b3.$eq$src/bcdmapper.v:13$242 ($eq).
Removed top 3 bits (of 4) from port B of cell calc.$flatten\n.\b2.$eq$src/bcdmapper.v:7$230 ($eq).
Removed top 2 bits (of 4) from port B of cell calc.$flatten\n.\b2.$eq$src/bcdmapper.v:8$232 ($eq).
Removed top 2 bits (of 4) from port B of cell calc.$flatten\n.\b2.$eq$src/bcdmapper.v:9$234 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b2.$eq$src/bcdmapper.v:10$236 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b2.$eq$src/bcdmapper.v:11$238 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b2.$eq$src/bcdmapper.v:12$240 ($eq).
Removed top 1 bits (of 4) from port B of cell calc.$flatten\n.\b2.$eq$src/bcdmapper.v:13$242 ($eq).
Removed cell calc.$flatten\n.$procmux$1011 ($mux).
Removed top 31 bits (of 32) from port B of cell calc.$flatten\n.$gt$src/numdriver.v:62$553 ($gt).
Removed top 1 bits (of 8) from mux cell calc.$flatten\n.$ternary$src/numdriver.v:49$534 ($mux).
Removed top 1 bits (of 4) from port B of cell calc.$auto$opt_dff.cc:218:make_patterns_logic$1472 ($ne).
Removed top 1 bits (of 3) from port B of cell calc.$flatten\n.$eq$src/numdriver.v:37$493 ($eq).
Removed top 1 bits (of 3) from port B of cell calc.$flatten\n.$eq$src/numdriver.v:36$491 ($eq).
Removed top 2 bits (of 3) from port B of cell calc.$flatten\n.$eq$src/numdriver.v:35$489 ($eq).
Removed top 1 bits (of 9) from port Y of cell calc.$add$src/calc.v:73$210 ($add).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l4.$sub$src/bcdop.v:24$159 ($sub).
Removed top 1 bits (of 5) from port A of cell calc.$flatten\agg.\l4.$sub$src/bcdop.v:24$159 ($sub).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l4.$sub$src/bcdop.v:26$167 ($sub).
Removed top 1 bits (of 5) from port A of cell calc.$flatten\agg.\l4.$sub$src/bcdop.v:26$167 ($sub).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l4.$sub$src/bcdop.v:26$167 ($sub).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l4.$sub$src/bcdop.v:26$169 ($sub).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l4.$sub$src/bcdop.v:26$169 ($sub).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l3.$sub$src/bcdop.v:24$159 ($sub).
Removed top 1 bits (of 5) from port A of cell calc.$flatten\agg.\l3.$sub$src/bcdop.v:24$159 ($sub).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l3.$sub$src/bcdop.v:26$167 ($sub).
Removed top 1 bits (of 5) from port A of cell calc.$flatten\agg.\l3.$sub$src/bcdop.v:26$167 ($sub).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l3.$sub$src/bcdop.v:26$167 ($sub).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l3.$sub$src/bcdop.v:26$169 ($sub).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l3.$sub$src/bcdop.v:26$169 ($sub).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l2.$sub$src/bcdop.v:24$159 ($sub).
Removed top 1 bits (of 5) from port A of cell calc.$flatten\agg.\l2.$sub$src/bcdop.v:24$159 ($sub).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l2.$sub$src/bcdop.v:26$167 ($sub).
Removed top 1 bits (of 5) from port A of cell calc.$flatten\agg.\l2.$sub$src/bcdop.v:26$167 ($sub).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l2.$sub$src/bcdop.v:26$167 ($sub).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l2.$sub$src/bcdop.v:26$169 ($sub).
Removed top 1 bits (of 5) from port B of cell calc.$flatten\agg.\l2.$sub$src/bcdop.v:26$169 ($sub).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l1.$sub$src/bcdop.v:24$159 ($sub).
Removed top 1 bits (of 5) from port A of cell calc.$flatten\agg.\l1.$sub$src/bcdop.v:24$159 ($sub).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l1.$sub$src/bcdop.v:26$167 ($sub).
Removed top 1 bits (of 5) from port A of cell calc.$flatten\agg.\l1.$sub$src/bcdop.v:26$167 ($sub).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l1.$sub$src/bcdop.v:26$169 ($sub).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l4.$add$src/bcdop.v:26$165 ($add).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l4.$add$src/bcdop.v:26$166 ($add).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l3.$add$src/bcdop.v:26$165 ($add).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l3.$add$src/bcdop.v:26$166 ($add).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l2.$add$src/bcdop.v:26$165 ($add).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l2.$add$src/bcdop.v:26$166 ($add).
Removed top 1 bits (of 5) from port Y of cell calc.$flatten\agg.\l1.$add$src/bcdop.v:26$165 ($add).
Removed top 24 bits (of 32) from wire calc.$add$src/calc.v:73$210_Y.
Removed top 1 bits (of 5) from wire calc.$flatten\agg.\l1.$add$src/bcdop.v:26$165_Y.
Removed top 1 bits (of 5) from wire calc.$flatten\agg.\l1.$sub$src/bcdop.v:24$159_Y.
Removed top 1 bits (of 5) from wire calc.$flatten\agg.\l2.$add$src/bcdop.v:26$165_Y.
Removed top 1 bits (of 5) from wire calc.$flatten\agg.\l2.$sub$src/bcdop.v:24$159_Y.
Removed top 1 bits (of 5) from wire calc.$flatten\agg.\l3.$add$src/bcdop.v:26$165_Y.
Removed top 1 bits (of 5) from wire calc.$flatten\agg.\l3.$add$src/bcdop.v:26$166_Y.
Removed top 1 bits (of 5) from wire calc.$flatten\agg.\l3.$sub$src/bcdop.v:26$167_Y.
Removed top 1 bits (of 5) from wire calc.$flatten\agg.\l3.$sub$src/bcdop.v:26$169_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.$eq$src/numdriver.v:35$489_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.$eq$src/numdriver.v:37$493_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.$eq$src/numdriver.v:38$495_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.$eq$src/numdriver.v:39$497_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.$eq$src/numdriver.v:40$499_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.$eq$src/numdriver.v:41$501_Y.
Removed top 1 bits (of 8) from wire calc.$flatten\n.$ternary$src/numdriver.v:49$534_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b2.$eq$src/bcdmapper.v:10$236_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b2.$eq$src/bcdmapper.v:11$238_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b2.$eq$src/bcdmapper.v:12$240_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b2.$eq$src/bcdmapper.v:13$242_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b2.$eq$src/bcdmapper.v:14$244_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b2.$eq$src/bcdmapper.v:15$246_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b2.$eq$src/bcdmapper.v:16$248_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b3.$eq$src/bcdmapper.v:10$236_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b3.$eq$src/bcdmapper.v:11$238_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b3.$eq$src/bcdmapper.v:12$240_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b3.$eq$src/bcdmapper.v:13$242_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b3.$eq$src/bcdmapper.v:14$244_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b3.$eq$src/bcdmapper.v:15$246_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b3.$eq$src/bcdmapper.v:16$248_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b4.$eq$src/bcdmapper.v:10$236_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b4.$eq$src/bcdmapper.v:11$238_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b4.$eq$src/bcdmapper.v:12$240_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b4.$eq$src/bcdmapper.v:13$242_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b4.$eq$src/bcdmapper.v:14$244_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b4.$eq$src/bcdmapper.v:16$248_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b5.$eq$src/bcdmapper.v:10$236_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b5.$eq$src/bcdmapper.v:12$240_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b5.$eq$src/bcdmapper.v:14$244_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b5.$eq$src/bcdmapper.v:16$248_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b5.$eq$src/bcdmapper.v:7$230_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b5.$eq$src/bcdmapper.v:8$232_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b7.$eq$src/bcdmapper.v:10$236_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b7.$eq$src/bcdmapper.v:12$240_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b7.$eq$src/bcdmapper.v:13$242_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b7.$eq$src/bcdmapper.v:14$244_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b7.$eq$src/bcdmapper.v:15$246_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b7.$eq$src/bcdmapper.v:16$248_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b7.$eq$src/bcdmapper.v:7$230_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b7.$eq$src/bcdmapper.v:8$232_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b7.$eq$src/bcdmapper.v:9$234_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b8.$eq$src/bcdmapper.v:13$242_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b8.$eq$src/bcdmapper.v:14$244_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b8.$eq$src/bcdmapper.v:15$246_Y.
Removed top 7 bits (of 8) from wire calc.$flatten\n.\b8.$eq$src/bcdmapper.v:16$248_Y.
Removed top 1 bits (of 9) from wire calc.$mul$src/calc.v:62$203_Y.
Removed top 24 bits (of 32) from wire calc.$mul$src/calc.v:73$209_Y.

12.14. Executing PEEPOPT pass (run peephole optimizers).

12.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..
Removed 0 unused cells and 89 unused wires.
<suppressed ~1 debug messages>

12.16. Executing SHARE pass (SAT-based resource sharing).

12.17. Executing TECHMAP pass (map to technology primitives).

12.17.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

12.17.2. Continuing TECHMAP pass.
Using template $paramod$cf052c1e8339b6717d1acedbc3be19ede852d676\_90_lut_cmp_ for cells of type $gt.
Using template $paramod$ffabd3b4cbee1be9226030f264c01b1383874a52\_90_lut_cmp_ for cells of type $gt.
No more expansions possible.
<suppressed ~175 debug messages>

12.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.
<suppressed ~69 debug messages>

12.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..
Removed 0 unused cells and 78 unused wires.
<suppressed ~1 debug messages>

12.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module calc:
  creating $macc model for $add$src/calc.v:101$221 ($add).
  creating $macc model for $add$src/calc.v:62$204 ($add).
  creating $macc model for $add$src/calc.v:73$210 ($add).
  creating $macc model for $flatten\agg.\l1.$add$src/bcdop.v:23$155 ($add).
  creating $macc model for $flatten\agg.\l1.$add$src/bcdop.v:26$165 ($add).
  creating $macc model for $flatten\agg.\l1.$sub$src/bcdop.v:24$159 ($sub).
  creating $macc model for $flatten\agg.\l1.$sub$src/bcdop.v:26$167 ($sub).
  creating $macc model for $flatten\agg.\l1.$sub$src/bcdop.v:26$169 ($sub).
  creating $macc model for $flatten\agg.\l2.$add$src/bcdop.v:23$154 ($add).
  creating $macc model for $flatten\agg.\l2.$add$src/bcdop.v:23$155 ($add).
  creating $macc model for $flatten\agg.\l2.$add$src/bcdop.v:25$163 ($add).
  creating $macc model for $flatten\agg.\l2.$add$src/bcdop.v:26$165 ($add).
  creating $macc model for $flatten\agg.\l2.$add$src/bcdop.v:26$166 ($add).
  creating $macc model for $flatten\agg.\l2.$sub$src/bcdop.v:24$159 ($sub).
  creating $macc model for $flatten\agg.\l2.$sub$src/bcdop.v:26$167 ($sub).
  creating $macc model for $flatten\agg.\l2.$sub$src/bcdop.v:26$169 ($sub).
  creating $macc model for $flatten\agg.\l3.$add$src/bcdop.v:23$154 ($add).
  creating $macc model for $flatten\agg.\l3.$add$src/bcdop.v:23$155 ($add).
  creating $macc model for $flatten\agg.\l3.$add$src/bcdop.v:25$163 ($add).
  creating $macc model for $flatten\agg.\l3.$add$src/bcdop.v:26$165 ($add).
  creating $macc model for $flatten\agg.\l3.$add$src/bcdop.v:26$166 ($add).
  creating $macc model for $flatten\agg.\l3.$sub$src/bcdop.v:24$159 ($sub).
  creating $macc model for $flatten\agg.\l3.$sub$src/bcdop.v:26$167 ($sub).
  creating $macc model for $flatten\agg.\l3.$sub$src/bcdop.v:26$169 ($sub).
  creating $macc model for $flatten\agg.\l4.$add$src/bcdop.v:23$154 ($add).
  creating $macc model for $flatten\agg.\l4.$add$src/bcdop.v:23$155 ($add).
  creating $macc model for $flatten\agg.\l4.$add$src/bcdop.v:25$163 ($add).
  creating $macc model for $flatten\agg.\l4.$add$src/bcdop.v:26$165 ($add).
  creating $macc model for $flatten\agg.\l4.$add$src/bcdop.v:26$166 ($add).
  creating $macc model for $flatten\agg.\l4.$sub$src/bcdop.v:24$159 ($sub).
  creating $macc model for $flatten\agg.\l4.$sub$src/bcdop.v:26$167 ($sub).
  creating $macc model for $flatten\agg.\l4.$sub$src/bcdop.v:26$169 ($sub).
  creating $macc model for $flatten\n.$add$src/numdriver.v:60$551 ($add).
  creating $macc model for $flatten\n.$add$src/numdriver.v:61$552 ($add).
  creating $macc model for $mul$src/calc.v:62$203 ($mul).
  creating $macc model for $mul$src/calc.v:73$209 ($mul).
  creating $macc model for $sub$src/calc.v:41$181 ($sub).
  creating $macc model for $sub$src/calc.v:73$212 ($sub).
  merging $macc model for $flatten\agg.\l4.$add$src/bcdop.v:26$165 into $flatten\agg.\l4.$sub$src/bcdop.v:26$167.
  merging $macc model for $flatten\agg.\l4.$add$src/bcdop.v:23$154 into $flatten\agg.\l4.$add$src/bcdop.v:23$155.
  merging $macc model for $flatten\agg.\l3.$add$src/bcdop.v:26$165 into $flatten\agg.\l3.$sub$src/bcdop.v:26$167.
  merging $macc model for $flatten\agg.\l3.$add$src/bcdop.v:23$154 into $flatten\agg.\l3.$add$src/bcdop.v:23$155.
  merging $macc model for $flatten\agg.\l2.$add$src/bcdop.v:26$165 into $flatten\agg.\l2.$sub$src/bcdop.v:26$167.
  merging $macc model for $flatten\agg.\l2.$add$src/bcdop.v:23$154 into $flatten\agg.\l2.$add$src/bcdop.v:23$155.
  merging $macc model for $flatten\agg.\l1.$add$src/bcdop.v:26$165 into $flatten\agg.\l1.$sub$src/bcdop.v:26$167.
  creating $alu model for $macc $flatten\agg.\l4.$sub$src/bcdop.v:24$159.
  creating $alu model for $macc $flatten\agg.\l4.$add$src/bcdop.v:26$166.
  creating $alu model for $macc $flatten\agg.\l4.$sub$src/bcdop.v:26$169.
  creating $alu model for $macc $flatten\agg.\l4.$add$src/bcdop.v:25$163.
  creating $alu model for $macc $flatten\agg.\l4.$add$src/bcdop.v:23$155.
  creating $alu model for $macc $flatten\n.$add$src/numdriver.v:60$551.
  creating $alu model for $macc $flatten\agg.\l3.$sub$src/bcdop.v:26$169.
  creating $alu model for $macc $flatten\agg.\l3.$sub$src/bcdop.v:24$159.
  creating $alu model for $macc $flatten\agg.\l3.$add$src/bcdop.v:26$166.
  creating $alu model for $macc $flatten\n.$add$src/numdriver.v:61$552.
  creating $alu model for $macc $flatten\agg.\l3.$add$src/bcdop.v:25$163.
  creating $alu model for $macc $flatten\agg.\l3.$add$src/bcdop.v:23$155.
  creating $alu model for $macc $flatten\agg.\l2.$sub$src/bcdop.v:26$169.
  creating $alu model for $macc $flatten\agg.\l2.$sub$src/bcdop.v:24$159.
  creating $alu model for $macc $flatten\agg.\l2.$add$src/bcdop.v:26$166.
  creating $alu model for $macc $flatten\agg.\l2.$add$src/bcdop.v:25$163.
  creating $alu model for $macc $flatten\agg.\l2.$add$src/bcdop.v:23$155.
  creating $alu model for $macc $sub$src/calc.v:41$181.
  creating $alu model for $macc $flatten\agg.\l1.$sub$src/bcdop.v:26$169.
  creating $alu model for $macc $flatten\agg.\l1.$sub$src/bcdop.v:24$159.
  creating $alu model for $macc $sub$src/calc.v:73$212.
  creating $alu model for $macc $flatten\agg.\l1.$add$src/bcdop.v:23$155.
  creating $alu model for $macc $add$src/calc.v:73$210.
  creating $alu model for $macc $add$src/calc.v:62$204.
  creating $alu model for $macc $add$src/calc.v:101$221.
  creating $macc cell for $mul$src/calc.v:62$203: $auto$alumacc.cc:365:replace_macc$1672
  creating $macc cell for $flatten\agg.\l3.$sub$src/bcdop.v:26$167: $auto$alumacc.cc:365:replace_macc$1673
  creating $macc cell for $flatten\agg.\l2.$sub$src/bcdop.v:26$167: $auto$alumacc.cc:365:replace_macc$1674
  creating $macc cell for $mul$src/calc.v:73$209: $auto$alumacc.cc:365:replace_macc$1675
  creating $macc cell for $flatten\agg.\l1.$sub$src/bcdop.v:26$167: $auto$alumacc.cc:365:replace_macc$1676
  creating $macc cell for $flatten\agg.\l4.$sub$src/bcdop.v:26$167: $auto$alumacc.cc:365:replace_macc$1677
  creating $alu model for $flatten\agg.\l1.$ge$src/bcdop.v:23$156 ($ge): new $alu
  creating $alu model for $flatten\agg.\l1.$lt$src/bcdop.v:25$164 ($lt): new $alu
  creating $alu model for $flatten\agg.\l2.$ge$src/bcdop.v:23$156 ($ge): new $alu
  creating $alu model for $flatten\agg.\l2.$lt$src/bcdop.v:25$164 ($lt): new $alu
  creating $alu model for $flatten\agg.\l3.$ge$src/bcdop.v:23$156 ($ge): new $alu
  creating $alu model for $flatten\agg.\l3.$lt$src/bcdop.v:25$164 ($lt): new $alu
  creating $alu model for $flatten\agg.\l4.$ge$src/bcdop.v:23$156 ($ge): new $alu
  creating $alu model for $flatten\agg.\l4.$lt$src/bcdop.v:25$164 ($lt): new $alu
  creating $alu model for $flatten\n.$gt$src/numdriver.v:62$553 ($gt): new $alu
  creating $alu model for $gt$src/calc.v:40$180 ($gt): new $alu
  creating $alu cell for $gt$src/calc.v:40$180: $auto$alumacc.cc:485:replace_alu$1688
  creating $alu cell for $flatten\n.$gt$src/numdriver.v:62$553: $auto$alumacc.cc:485:replace_alu$1693
  creating $alu cell for $flatten\agg.\l4.$lt$src/bcdop.v:25$164: $auto$alumacc.cc:485:replace_alu$1698
  creating $alu cell for $flatten\agg.\l4.$ge$src/bcdop.v:23$156: $auto$alumacc.cc:485:replace_alu$1703
  creating $alu cell for $flatten\agg.\l3.$lt$src/bcdop.v:25$164: $auto$alumacc.cc:485:replace_alu$1712
  creating $alu cell for $flatten\agg.\l3.$ge$src/bcdop.v:23$156: $auto$alumacc.cc:485:replace_alu$1717
  creating $alu cell for $flatten\agg.\l2.$lt$src/bcdop.v:25$164: $auto$alumacc.cc:485:replace_alu$1726
  creating $alu cell for $flatten\agg.\l2.$ge$src/bcdop.v:23$156: $auto$alumacc.cc:485:replace_alu$1731
  creating $alu cell for $flatten\agg.\l1.$ge$src/bcdop.v:23$156: $auto$alumacc.cc:485:replace_alu$1740
  creating $alu cell for $add$src/calc.v:101$221: $auto$alumacc.cc:485:replace_alu$1749
  creating $alu cell for $add$src/calc.v:62$204: $auto$alumacc.cc:485:replace_alu$1752
  creating $alu cell for $add$src/calc.v:73$210: $auto$alumacc.cc:485:replace_alu$1755
  creating $alu cell for $flatten\agg.\l1.$lt$src/bcdop.v:25$164: $auto$alumacc.cc:485:replace_alu$1758
  creating $alu cell for $flatten\agg.\l1.$add$src/bcdop.v:23$155: $auto$alumacc.cc:485:replace_alu$1769
  creating $alu cell for $sub$src/calc.v:73$212: $auto$alumacc.cc:485:replace_alu$1772
  creating $alu cell for $flatten\agg.\l1.$sub$src/bcdop.v:24$159: $auto$alumacc.cc:485:replace_alu$1775
  creating $alu cell for $flatten\agg.\l1.$sub$src/bcdop.v:26$169: $auto$alumacc.cc:485:replace_alu$1778
  creating $alu cell for $sub$src/calc.v:41$181: $auto$alumacc.cc:485:replace_alu$1781
  creating $alu cell for $flatten\agg.\l2.$add$src/bcdop.v:23$155: $auto$alumacc.cc:485:replace_alu$1784
  creating $alu cell for $flatten\agg.\l2.$add$src/bcdop.v:25$163: $auto$alumacc.cc:485:replace_alu$1787
  creating $alu cell for $flatten\agg.\l2.$add$src/bcdop.v:26$166: $auto$alumacc.cc:485:replace_alu$1790
  creating $alu cell for $flatten\agg.\l2.$sub$src/bcdop.v:24$159: $auto$alumacc.cc:485:replace_alu$1793
  creating $alu cell for $flatten\agg.\l2.$sub$src/bcdop.v:26$169: $auto$alumacc.cc:485:replace_alu$1796
  creating $alu cell for $flatten\agg.\l3.$add$src/bcdop.v:23$155: $auto$alumacc.cc:485:replace_alu$1799
  creating $alu cell for $flatten\n.$add$src/numdriver.v:61$552: $auto$alumacc.cc:485:replace_alu$1802
  creating $alu cell for $flatten\agg.\l3.$add$src/bcdop.v:25$163: $auto$alumacc.cc:485:replace_alu$1805
  creating $alu cell for $flatten\agg.\l3.$add$src/bcdop.v:26$166: $auto$alumacc.cc:485:replace_alu$1808
  creating $alu cell for $flatten\agg.\l3.$sub$src/bcdop.v:24$159: $auto$alumacc.cc:485:replace_alu$1811
  creating $alu cell for $flatten\agg.\l3.$sub$src/bcdop.v:26$169: $auto$alumacc.cc:485:replace_alu$1814
  creating $alu cell for $flatten\n.$add$src/numdriver.v:60$551: $auto$alumacc.cc:485:replace_alu$1817
  creating $alu cell for $flatten\agg.\l4.$add$src/bcdop.v:23$155: $auto$alumacc.cc:485:replace_alu$1820
  creating $alu cell for $flatten\agg.\l4.$sub$src/bcdop.v:26$169: $auto$alumacc.cc:485:replace_alu$1823
  creating $alu cell for $flatten\agg.\l4.$add$src/bcdop.v:25$163: $auto$alumacc.cc:485:replace_alu$1826
  creating $alu cell for $flatten\agg.\l4.$add$src/bcdop.v:26$166: $auto$alumacc.cc:485:replace_alu$1829
  creating $alu cell for $flatten\agg.\l4.$sub$src/bcdop.v:24$159: $auto$alumacc.cc:485:replace_alu$1832
  created 35 $alu and 6 $macc cells.

12.21. Executing OPT pass (performing simple optimizations).

12.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.
<suppressed ~4 debug messages>

12.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
<suppressed ~36 debug messages>
Removed a total of 8 cells.

12.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

12.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \calc.
Performed a total of 0 changes.

12.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

12.21.6. Executing OPT_DFF pass (perform DFF optimizations).

12.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..
Removed 8 unused cells and 41 unused wires.
<suppressed ~11 debug messages>

12.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.21.9. Rerunning OPT passes. (Maybe there is more to do..)

12.21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

12.21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \calc.
Performed a total of 0 changes.

12.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.21.13. Executing OPT_DFF pass (perform DFF optimizations).

12.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.21.16. Finished OPT passes. (There is nothing left to do.)

12.22. Executing MEMORY pass.

12.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

12.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

12.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

12.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

12.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

12.25. Executing TECHMAP pass (map to technology primitives).

12.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

12.25.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

12.26. Executing ICE40_BRAMINIT pass.

12.27. Executing OPT pass (performing simple optimizations).

12.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.
<suppressed ~9 debug messages>

12.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.27.3. Executing OPT_DFF pass (perform DFF optimizations).

12.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..
Removed 4 unused cells and 6 unused wires.
<suppressed ~5 debug messages>

12.27.5. Finished fast OPT passes.

12.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

12.29. Executing OPT pass (performing simple optimizations).

12.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

12.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \calc.
    Consolidated identical input bits for $mux cell $flatten\agg.\l1.$ternary$src/bcdop.v:24$162:
      Old ports: A={ $flatten\agg.\l1.$add$src/bcdop.v:23$155_Y [3:1] $auto$wreduce.cc:454:run$1611 [0] }, B=$auto$wreduce.cc:454:run$1611 [3:0], Y=\agg.l1.opp_sum [3:0]
      New ports: A=$flatten\agg.\l1.$add$src/bcdop.v:23$155_Y [3:1], B=$auto$wreduce.cc:454:run$1611 [3:1], Y=\agg.l1.opp_sum [3:1]
      New connections: \agg.l1.opp_sum [0] = $auto$wreduce.cc:454:run$1611 [0]
    Consolidated identical input bits for $mux cell $flatten\agg.\l2.$ternary$src/bcdop.v:24$162:
      Old ports: A={ $flatten\agg.\l2.$add$src/bcdop.v:23$155_Y [3:1] $auto$wreduce.cc:454:run$1613 [0] }, B=$auto$wreduce.cc:454:run$1613 [3:0], Y=\agg.l2.opp_sum [3:0]
      New ports: A=$flatten\agg.\l2.$add$src/bcdop.v:23$155_Y [3:1], B=$auto$wreduce.cc:454:run$1613 [3:1], Y=\agg.l2.opp_sum [3:1]
      New connections: \agg.l2.opp_sum [0] = $auto$wreduce.cc:454:run$1613 [0]
    Consolidated identical input bits for $mux cell $flatten\agg.\l3.$ternary$src/bcdop.v:24$162:
      Old ports: A=$flatten\agg.\l3.$add$src/bcdop.v:23$155_Y [3:0], B={ $flatten\agg.\l3.$sub$src/bcdop.v:24$159_Y [3:1] $flatten\agg.\l3.$add$src/bcdop.v:23$155_Y [0] }, Y=\agg.l3.opp_sum [3:0]
      New ports: A=$flatten\agg.\l3.$add$src/bcdop.v:23$155_Y [3:1], B=$flatten\agg.\l3.$sub$src/bcdop.v:24$159_Y [3:1], Y=\agg.l3.opp_sum [3:1]
      New connections: \agg.l3.opp_sum [0] = $flatten\agg.\l3.$add$src/bcdop.v:23$155_Y [0]
    Consolidated identical input bits for $mux cell $flatten\agg.\l4.$ternary$src/bcdop.v:24$162:
      Old ports: A=$flatten\agg.\l4.$add$src/bcdop.v:23$155_Y [3:0], B={ $flatten\agg.\l4.$sub$src/bcdop.v:24$159_Y [3:1] $flatten\agg.\l4.$add$src/bcdop.v:23$155_Y [0] }, Y=\agg.l4.opp_sum [3:0]
      New ports: A=$flatten\agg.\l4.$add$src/bcdop.v:23$155_Y [3:1], B=$flatten\agg.\l4.$sub$src/bcdop.v:24$159_Y [3:1], Y=\agg.l4.opp_sum [3:1]
      New connections: \agg.l4.opp_sum [0] = $flatten\agg.\l4.$add$src/bcdop.v:23$155_Y [0]
    Consolidated identical input bits for $mux cell $flatten\n.$ternary$src/numdriver.v:49$534:
      Old ports: A=7'0000000, B=7'1111111, Y=$auto$wreduce.cc:454:run$1624 [6:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$1624 [0]
      New connections: $auto$wreduce.cc:454:run$1624 [6:1] = { $auto$wreduce.cc:454:run$1624 [0] $auto$wreduce.cc:454:run$1624 [0] $auto$wreduce.cc:454:run$1624 [0] $auto$wreduce.cc:454:run$1624 [0] $auto$wreduce.cc:454:run$1624 [0] $auto$wreduce.cc:454:run$1624 [0] }
    Consolidated identical input bits for $mux cell $flatten\n.\b2.$ternary$src/bcdmapper.v:15$255:
      Old ports: A=8'00000000, B=8'11111111, Y=$flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y
      New ports: A=1'0, B=1'1, Y=$flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y [0]
      New connections: $flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y [7:1] = { $flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\n.\b3.$ternary$src/bcdmapper.v:15$255:
      Old ports: A=8'00000000, B=8'11111111, Y=$flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y
      New ports: A=1'0, B=1'1, Y=$flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y [0]
      New connections: $flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y [7:1] = { $flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\n.\b4.$ternary$src/bcdmapper.v:15$255:
      Old ports: A=8'00000000, B=8'11111111, Y=$flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y
      New ports: A=1'0, B=1'1, Y=$flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y [0]
      New connections: $flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y [7:1] = { $flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\n.\b5.$ternary$src/bcdmapper.v:15$255:
      Old ports: A=8'00000000, B=8'11111111, Y=$flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y
      New ports: A=1'0, B=1'1, Y=$flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y [0]
      New connections: $flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y [7:1] = { $flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\n.\b7.$ternary$src/bcdmapper.v:15$255:
      Old ports: A=8'00000000, B=8'11111111, Y=$flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y
      New ports: A=1'0, B=1'1, Y=$flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y [0]
      New connections: $flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y [7:1] = { $flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\n.\b8.$ternary$src/bcdmapper.v:15$255:
      Old ports: A=8'00000000, B=8'11111111, Y=$flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y
      New ports: A=1'0, B=1'1, Y=$flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y [0]
      New connections: $flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y [7:1] = { $flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$1152:
      Old ports: A={ $procmux$1149_Y [8:1] 1'0 }, B=9'000000010, Y=$procmux$1152_Y
      New ports: A=$procmux$1149_Y [8:1], B=8'00000001, Y=$procmux$1152_Y [8:1]
      New connections: $procmux$1152_Y [0] = 1'0
  Optimizing cells in module \calc.
    Consolidated identical input bits for $mux cell $flatten\n.$ternary$src/numdriver.v:48$536:
      Old ports: A={ 1'0 $auto$wreduce.cc:454:run$1624 [6:0] }, B=8'10111111, Y=$flatten\n.$ternary$src/numdriver.v:48$536_Y
      New ports: A={ 1'0 $auto$wreduce.cc:454:run$1624 [0] $auto$wreduce.cc:454:run$1624 [0] }, B=3'101, Y={ $flatten\n.$ternary$src/numdriver.v:48$536_Y [7:6] $flatten\n.$ternary$src/numdriver.v:48$536_Y [0] }
      New connections: $flatten\n.$ternary$src/numdriver.v:48$536_Y [5:1] = { $flatten\n.$ternary$src/numdriver.v:48$536_Y [0] $flatten\n.$ternary$src/numdriver.v:48$536_Y [0] $flatten\n.$ternary$src/numdriver.v:48$536_Y [0] $flatten\n.$ternary$src/numdriver.v:48$536_Y [0] $flatten\n.$ternary$src/numdriver.v:48$536_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\n.\b2.$ternary$src/bcdmapper.v:14$257:
      Old ports: A=$flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y, B=8'11110110, Y=$flatten\n.\b2.$ternary$src/bcdmapper.v:14$257_Y
      New ports: A={ $flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b2.$ternary$src/bcdmapper.v:15$255_Y [0] }, B=2'10, Y=$flatten\n.\b2.$ternary$src/bcdmapper.v:14$257_Y [1:0]
      New connections: $flatten\n.\b2.$ternary$src/bcdmapper.v:14$257_Y [7:2] = { $flatten\n.\b2.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b2.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b2.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b2.$ternary$src/bcdmapper.v:14$257_Y [1:0] $flatten\n.\b2.$ternary$src/bcdmapper.v:14$257_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b3.$ternary$src/bcdmapper.v:14$257:
      Old ports: A=$flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y, B=8'11110110, Y=$flatten\n.\b3.$ternary$src/bcdmapper.v:14$257_Y
      New ports: A={ $flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b3.$ternary$src/bcdmapper.v:15$255_Y [0] }, B=2'10, Y=$flatten\n.\b3.$ternary$src/bcdmapper.v:14$257_Y [1:0]
      New connections: $flatten\n.\b3.$ternary$src/bcdmapper.v:14$257_Y [7:2] = { $flatten\n.\b3.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b3.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b3.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b3.$ternary$src/bcdmapper.v:14$257_Y [1:0] $flatten\n.\b3.$ternary$src/bcdmapper.v:14$257_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b4.$ternary$src/bcdmapper.v:14$257:
      Old ports: A=$flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y, B=8'11110110, Y=$flatten\n.\b4.$ternary$src/bcdmapper.v:14$257_Y
      New ports: A={ $flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b4.$ternary$src/bcdmapper.v:15$255_Y [0] }, B=2'10, Y=$flatten\n.\b4.$ternary$src/bcdmapper.v:14$257_Y [1:0]
      New connections: $flatten\n.\b4.$ternary$src/bcdmapper.v:14$257_Y [7:2] = { $flatten\n.\b4.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b4.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b4.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b4.$ternary$src/bcdmapper.v:14$257_Y [1:0] $flatten\n.\b4.$ternary$src/bcdmapper.v:14$257_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b5.$ternary$src/bcdmapper.v:14$257:
      Old ports: A=$flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y, B=8'11110110, Y=$flatten\n.\b5.$ternary$src/bcdmapper.v:14$257_Y
      New ports: A={ $flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b5.$ternary$src/bcdmapper.v:15$255_Y [0] }, B=2'10, Y=$flatten\n.\b5.$ternary$src/bcdmapper.v:14$257_Y [1:0]
      New connections: $flatten\n.\b5.$ternary$src/bcdmapper.v:14$257_Y [7:2] = { $flatten\n.\b5.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b5.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b5.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b5.$ternary$src/bcdmapper.v:14$257_Y [1:0] $flatten\n.\b5.$ternary$src/bcdmapper.v:14$257_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b7.$ternary$src/bcdmapper.v:14$257:
      Old ports: A=$flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y, B=8'11110110, Y=$flatten\n.\b7.$ternary$src/bcdmapper.v:14$257_Y
      New ports: A={ $flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b7.$ternary$src/bcdmapper.v:15$255_Y [0] }, B=2'10, Y=$flatten\n.\b7.$ternary$src/bcdmapper.v:14$257_Y [1:0]
      New connections: $flatten\n.\b7.$ternary$src/bcdmapper.v:14$257_Y [7:2] = { $flatten\n.\b7.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b7.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b7.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b7.$ternary$src/bcdmapper.v:14$257_Y [1:0] $flatten\n.\b7.$ternary$src/bcdmapper.v:14$257_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b8.$ternary$src/bcdmapper.v:14$257:
      Old ports: A=$flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y, B=8'11110110, Y=$flatten\n.\b8.$ternary$src/bcdmapper.v:14$257_Y
      New ports: A={ $flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y [0] $flatten\n.\b8.$ternary$src/bcdmapper.v:15$255_Y [0] }, B=2'10, Y=$flatten\n.\b8.$ternary$src/bcdmapper.v:14$257_Y [1:0]
      New connections: $flatten\n.\b8.$ternary$src/bcdmapper.v:14$257_Y [7:2] = { $flatten\n.\b8.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b8.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b8.$ternary$src/bcdmapper.v:14$257_Y [1] $flatten\n.\b8.$ternary$src/bcdmapper.v:14$257_Y [1:0] $flatten\n.\b8.$ternary$src/bcdmapper.v:14$257_Y [1] }
  Optimizing cells in module \calc.
    Consolidated identical input bits for $mux cell $flatten\n.$ternary$src/numdriver.v:47$538:
      Old ports: A=$flatten\n.$ternary$src/numdriver.v:48$536_Y, B=8'11011111, Y=$flatten\n.$ternary$src/numdriver.v:47$538_Y
      New ports: A={ $flatten\n.$ternary$src/numdriver.v:48$536_Y [7:6] $flatten\n.$ternary$src/numdriver.v:48$536_Y [0] $flatten\n.$ternary$src/numdriver.v:48$536_Y [0] }, B=4'1101, Y={ $flatten\n.$ternary$src/numdriver.v:47$538_Y [7:5] $flatten\n.$ternary$src/numdriver.v:47$538_Y [0] }
      New connections: $flatten\n.$ternary$src/numdriver.v:47$538_Y [4:1] = { $flatten\n.$ternary$src/numdriver.v:47$538_Y [0] $flatten\n.$ternary$src/numdriver.v:47$538_Y [0] $flatten\n.$ternary$src/numdriver.v:47$538_Y [0] $flatten\n.$ternary$src/numdriver.v:47$538_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259:
      Old ports: A=$flatten\n.\b2.$ternary$src/bcdmapper.v:14$257_Y, B=8'11111110, Y=$flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y
      New ports: A={ $flatten\n.\b2.$ternary$src/bcdmapper.v:14$257_Y [0] $flatten\n.\b2.$ternary$src/bcdmapper.v:14$257_Y [1:0] }, B=3'110, Y={ $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y [3] $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y [1:0] }
      New connections: { $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y [7:4] $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y [2] } = { $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259:
      Old ports: A=$flatten\n.\b3.$ternary$src/bcdmapper.v:14$257_Y, B=8'11111110, Y=$flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y
      New ports: A={ $flatten\n.\b3.$ternary$src/bcdmapper.v:14$257_Y [0] $flatten\n.\b3.$ternary$src/bcdmapper.v:14$257_Y [1:0] }, B=3'110, Y={ $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y [3] $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y [1:0] }
      New connections: { $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y [7:4] $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y [2] } = { $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259:
      Old ports: A=$flatten\n.\b4.$ternary$src/bcdmapper.v:14$257_Y, B=8'11111110, Y=$flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y
      New ports: A={ $flatten\n.\b4.$ternary$src/bcdmapper.v:14$257_Y [0] $flatten\n.\b4.$ternary$src/bcdmapper.v:14$257_Y [1:0] }, B=3'110, Y={ $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y [3] $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y [1:0] }
      New connections: { $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y [7:4] $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y [2] } = { $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259:
      Old ports: A=$flatten\n.\b5.$ternary$src/bcdmapper.v:14$257_Y, B=8'11111110, Y=$flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y
      New ports: A={ $flatten\n.\b5.$ternary$src/bcdmapper.v:14$257_Y [0] $flatten\n.\b5.$ternary$src/bcdmapper.v:14$257_Y [1:0] }, B=3'110, Y={ $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y [3] $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y [1:0] }
      New connections: { $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y [7:4] $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y [2] } = { $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259:
      Old ports: A=$flatten\n.\b7.$ternary$src/bcdmapper.v:14$257_Y, B=8'11111110, Y=$flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y
      New ports: A={ $flatten\n.\b7.$ternary$src/bcdmapper.v:14$257_Y [0] $flatten\n.\b7.$ternary$src/bcdmapper.v:14$257_Y [1:0] }, B=3'110, Y={ $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y [3] $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y [1:0] }
      New connections: { $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y [7:4] $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y [2] } = { $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259:
      Old ports: A=$flatten\n.\b8.$ternary$src/bcdmapper.v:14$257_Y, B=8'11111110, Y=$flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y
      New ports: A={ $flatten\n.\b8.$ternary$src/bcdmapper.v:14$257_Y [0] $flatten\n.\b8.$ternary$src/bcdmapper.v:14$257_Y [1:0] }, B=3'110, Y={ $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y [3] $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y [1:0] }
      New connections: { $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y [7:4] $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y [2] } = { $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y [1] }
  Optimizing cells in module \calc.
    Consolidated identical input bits for $mux cell $flatten\n.$ternary$src/numdriver.v:46$540:
      Old ports: A=$flatten\n.$ternary$src/numdriver.v:47$538_Y, B=8'11101111, Y=$flatten\n.$ternary$src/numdriver.v:46$540_Y
      New ports: A={ $flatten\n.$ternary$src/numdriver.v:47$538_Y [7:5] $flatten\n.$ternary$src/numdriver.v:47$538_Y [0] $flatten\n.$ternary$src/numdriver.v:47$538_Y [0] }, B=5'11101, Y={ $flatten\n.$ternary$src/numdriver.v:46$540_Y [7:4] $flatten\n.$ternary$src/numdriver.v:46$540_Y [0] }
      New connections: $flatten\n.$ternary$src/numdriver.v:46$540_Y [3:1] = { $flatten\n.$ternary$src/numdriver.v:46$540_Y [0] $flatten\n.$ternary$src/numdriver.v:46$540_Y [0] $flatten\n.$ternary$src/numdriver.v:46$540_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261:
      Old ports: A=$flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y, B=8'11100000, Y=$flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y
      New ports: A={ $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y [3] $flatten\n.\b2.$ternary$src/bcdmapper.v:13$259_Y [1:0] }, B=4'1000, Y={ $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [3] $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [1:0] }
      New connections: { $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [7:6] $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [4] $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [2] } = { $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [1] $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261:
      Old ports: A=$flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y, B=8'11100000, Y=$flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y
      New ports: A={ $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y [3] $flatten\n.\b3.$ternary$src/bcdmapper.v:13$259_Y [1:0] }, B=4'1000, Y={ $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [3] $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [1:0] }
      New connections: { $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [7:6] $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [4] $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [2] } = { $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [1] $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261:
      Old ports: A=$flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y, B=8'11100000, Y=$flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y
      New ports: A={ $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y [3] $flatten\n.\b4.$ternary$src/bcdmapper.v:13$259_Y [1:0] }, B=4'1000, Y={ $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [3] $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [1:0] }
      New connections: { $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [7:6] $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [4] $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [2] } = { $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [1] $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261:
      Old ports: A=$flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y, B=8'11100000, Y=$flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y
      New ports: A={ $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y [3] $flatten\n.\b5.$ternary$src/bcdmapper.v:13$259_Y [1:0] }, B=4'1000, Y={ $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [3] $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [1:0] }
      New connections: { $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [7:6] $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [4] $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [2] } = { $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [1] $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261:
      Old ports: A=$flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y, B=8'11100000, Y=$flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y
      New ports: A={ $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y [3] $flatten\n.\b7.$ternary$src/bcdmapper.v:13$259_Y [1:0] }, B=4'1000, Y={ $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [3] $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [1:0] }
      New connections: { $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [7:6] $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [4] $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [2] } = { $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [1] $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261:
      Old ports: A=$flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y, B=8'11100000, Y=$flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y
      New ports: A={ $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y [1] $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y [3] $flatten\n.\b8.$ternary$src/bcdmapper.v:13$259_Y [1:0] }, B=4'1000, Y={ $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [3] $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [1:0] }
      New connections: { $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [7:6] $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [4] $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [2] } = { $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [1] $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [1] }
  Optimizing cells in module \calc.
    Consolidated identical input bits for $mux cell $flatten\n.$ternary$src/numdriver.v:45$542:
      Old ports: A=$flatten\n.$ternary$src/numdriver.v:46$540_Y, B=8'11110111, Y=$flatten\n.$ternary$src/numdriver.v:45$542_Y
      New ports: A={ $flatten\n.$ternary$src/numdriver.v:46$540_Y [7:4] $flatten\n.$ternary$src/numdriver.v:46$540_Y [0] $flatten\n.$ternary$src/numdriver.v:46$540_Y [0] }, B=6'111101, Y={ $flatten\n.$ternary$src/numdriver.v:45$542_Y [7:3] $flatten\n.$ternary$src/numdriver.v:45$542_Y [0] }
      New connections: $flatten\n.$ternary$src/numdriver.v:45$542_Y [2:1] = { $flatten\n.$ternary$src/numdriver.v:45$542_Y [0] $flatten\n.$ternary$src/numdriver.v:45$542_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263:
      Old ports: A=$flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y, B=8'10111110, Y=$flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y
      New ports: A={ $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [3] $flatten\n.\b2.$ternary$src/bcdmapper.v:12$261_Y [1:0] }, B=5'01110, Y={ $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y [6:5] $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y [3] $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y [1:0] }
      New connections: { $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y [7] $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y [4] $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y [2] } = { $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y [5] $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y [1] $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263:
      Old ports: A=$flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y, B=8'10111110, Y=$flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y
      New ports: A={ $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [3] $flatten\n.\b3.$ternary$src/bcdmapper.v:12$261_Y [1:0] }, B=5'01110, Y={ $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y [6:5] $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y [3] $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y [1:0] }
      New connections: { $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y [7] $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y [4] $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y [2] } = { $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y [5] $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y [1] $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263:
      Old ports: A=$flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y, B=8'10111110, Y=$flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y
      New ports: A={ $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [3] $flatten\n.\b4.$ternary$src/bcdmapper.v:12$261_Y [1:0] }, B=5'01110, Y={ $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y [6:5] $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y [3] $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y [1:0] }
      New connections: { $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y [7] $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y [4] $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y [2] } = { $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y [5] $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y [1] $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263:
      Old ports: A=$flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y, B=8'10111110, Y=$flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y
      New ports: A={ $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [3] $flatten\n.\b5.$ternary$src/bcdmapper.v:12$261_Y [1:0] }, B=5'01110, Y={ $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y [6:5] $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y [3] $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y [1:0] }
      New connections: { $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y [7] $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y [4] $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y [2] } = { $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y [5] $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y [1] $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263:
      Old ports: A=$flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y, B=8'10111110, Y=$flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y
      New ports: A={ $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [3] $flatten\n.\b7.$ternary$src/bcdmapper.v:12$261_Y [1:0] }, B=5'01110, Y={ $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y [6:5] $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y [3] $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y [1:0] }
      New connections: { $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y [7] $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y [4] $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y [2] } = { $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y [5] $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y [1] $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263:
      Old ports: A=$flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y, B=8'10111110, Y=$flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y
      New ports: A={ $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [5] $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [3] $flatten\n.\b8.$ternary$src/bcdmapper.v:12$261_Y [1:0] }, B=5'01110, Y={ $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y [6:5] $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y [3] $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y [1:0] }
      New connections: { $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y [7] $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y [4] $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y [2] } = { $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y [5] $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y [1] $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y [1] }
  Optimizing cells in module \calc.
    Consolidated identical input bits for $mux cell $flatten\n.$ternary$src/numdriver.v:44$544:
      Old ports: A=$flatten\n.$ternary$src/numdriver.v:45$542_Y, B=8'11111011, Y=$flatten\n.$ternary$src/numdriver.v:44$544_Y
      New ports: A={ $flatten\n.$ternary$src/numdriver.v:45$542_Y [7:3] $flatten\n.$ternary$src/numdriver.v:45$542_Y [0] $flatten\n.$ternary$src/numdriver.v:45$542_Y [0] }, B=7'1111101, Y={ $flatten\n.$ternary$src/numdriver.v:44$544_Y [7:2] $flatten\n.$ternary$src/numdriver.v:44$544_Y [0] }
      New connections: $flatten\n.$ternary$src/numdriver.v:44$544_Y [1] = $flatten\n.$ternary$src/numdriver.v:44$544_Y [0]
    Consolidated identical input bits for $mux cell $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265:
      Old ports: A=$flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y, B=8'10110110, Y=$flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y
      New ports: A={ $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y [6:5] $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y [3] $flatten\n.\b2.$ternary$src/bcdmapper.v:11$263_Y [1:0] }, B=5'01010, Y={ $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [6:5] $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [3] $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [1:0] }
      New connections: { $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [7] $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [4] $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [2] } = { $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [5] $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [1] $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265:
      Old ports: A=$flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y, B=8'10110110, Y=$flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y
      New ports: A={ $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y [6:5] $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y [3] $flatten\n.\b3.$ternary$src/bcdmapper.v:11$263_Y [1:0] }, B=5'01010, Y={ $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [6:5] $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [3] $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [1:0] }
      New connections: { $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [7] $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [4] $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [2] } = { $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [5] $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [1] $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265:
      Old ports: A=$flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y, B=8'10110110, Y=$flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y
      New ports: A={ $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y [6:5] $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y [3] $flatten\n.\b4.$ternary$src/bcdmapper.v:11$263_Y [1:0] }, B=5'01010, Y={ $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [6:5] $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [3] $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [1:0] }
      New connections: { $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [7] $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [4] $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [2] } = { $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [5] $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [1] $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265:
      Old ports: A=$flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y, B=8'10110110, Y=$flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y
      New ports: A={ $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y [6:5] $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y [3] $flatten\n.\b5.$ternary$src/bcdmapper.v:11$263_Y [1:0] }, B=5'01010, Y={ $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [6:5] $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [3] $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [1:0] }
      New connections: { $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [7] $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [4] $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [2] } = { $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [5] $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [1] $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265:
      Old ports: A=$flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y, B=8'10110110, Y=$flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y
      New ports: A={ $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y [6:5] $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y [3] $flatten\n.\b7.$ternary$src/bcdmapper.v:11$263_Y [1:0] }, B=5'01010, Y={ $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [6:5] $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [3] $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [1:0] }
      New connections: { $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [7] $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [4] $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [2] } = { $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [5] $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [1] $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [1] }
    Consolidated identical input bits for $mux cell $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265:
      Old ports: A=$flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y, B=8'10110110, Y=$flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y
      New ports: A={ $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y [6:5] $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y [3] $flatten\n.\b8.$ternary$src/bcdmapper.v:11$263_Y [1:0] }, B=5'01010, Y={ $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [6:5] $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [3] $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [1:0] }
      New connections: { $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [7] $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [4] $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [2] } = { $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [5] $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [1] $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [1] }
  Optimizing cells in module \calc.
    Consolidated identical input bits for $mux cell $flatten\n.\b2.$ternary$src/bcdmapper.v:9$267:
      Old ports: A=$flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y, B=8'01100110, Y=$flatten\n.\b2.$ternary$src/bcdmapper.v:9$267_Y
      New ports: A={ $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [5] $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [6:5] $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [1] $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [3] $flatten\n.\b2.$ternary$src/bcdmapper.v:10$265_Y [1:0] }, B=7'0110010, Y={ $flatten\n.\b2.$ternary$src/bcdmapper.v:9$267_Y [7:3] $flatten\n.\b2.$ternary$src/bcdmapper.v:9$267_Y [1:0] }
      New connections: $flatten\n.\b2.$ternary$src/bcdmapper.v:9$267_Y [2] = $flatten\n.\b2.$ternary$src/bcdmapper.v:9$267_Y [1]
    Consolidated identical input bits for $mux cell $flatten\n.\b3.$ternary$src/bcdmapper.v:9$267:
      Old ports: A=$flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y, B=8'01100110, Y=$flatten\n.\b3.$ternary$src/bcdmapper.v:9$267_Y
      New ports: A={ $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [5] $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [6:5] $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [1] $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [3] $flatten\n.\b3.$ternary$src/bcdmapper.v:10$265_Y [1:0] }, B=7'0110010, Y={ $flatten\n.\b3.$ternary$src/bcdmapper.v:9$267_Y [7:3] $flatten\n.\b3.$ternary$src/bcdmapper.v:9$267_Y [1:0] }
      New connections: $flatten\n.\b3.$ternary$src/bcdmapper.v:9$267_Y [2] = $flatten\n.\b3.$ternary$src/bcdmapper.v:9$267_Y [1]
    Consolidated identical input bits for $mux cell $flatten\n.\b4.$ternary$src/bcdmapper.v:9$267:
      Old ports: A=$flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y, B=8'01100110, Y=$flatten\n.\b4.$ternary$src/bcdmapper.v:9$267_Y
      New ports: A={ $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [5] $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [6:5] $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [1] $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [3] $flatten\n.\b4.$ternary$src/bcdmapper.v:10$265_Y [1:0] }, B=7'0110010, Y={ $flatten\n.\b4.$ternary$src/bcdmapper.v:9$267_Y [7:3] $flatten\n.\b4.$ternary$src/bcdmapper.v:9$267_Y [1:0] }
      New connections: $flatten\n.\b4.$ternary$src/bcdmapper.v:9$267_Y [2] = $flatten\n.\b4.$ternary$src/bcdmapper.v:9$267_Y [1]
    Consolidated identical input bits for $mux cell $flatten\n.\b5.$ternary$src/bcdmapper.v:9$267:
      Old ports: A=$flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y, B=8'01100110, Y=$flatten\n.\b5.$ternary$src/bcdmapper.v:9$267_Y
      New ports: A={ $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [5] $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [6:5] $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [1] $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [3] $flatten\n.\b5.$ternary$src/bcdmapper.v:10$265_Y [1:0] }, B=7'0110010, Y={ $flatten\n.\b5.$ternary$src/bcdmapper.v:9$267_Y [7:3] $flatten\n.\b5.$ternary$src/bcdmapper.v:9$267_Y [1:0] }
      New connections: $flatten\n.\b5.$ternary$src/bcdmapper.v:9$267_Y [2] = $flatten\n.\b5.$ternary$src/bcdmapper.v:9$267_Y [1]
    Consolidated identical input bits for $mux cell $flatten\n.\b7.$ternary$src/bcdmapper.v:9$267:
      Old ports: A=$flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y, B=8'01100110, Y=$flatten\n.\b7.$ternary$src/bcdmapper.v:9$267_Y
      New ports: A={ $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [5] $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [6:5] $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [1] $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [3] $flatten\n.\b7.$ternary$src/bcdmapper.v:10$265_Y [1:0] }, B=7'0110010, Y={ $flatten\n.\b7.$ternary$src/bcdmapper.v:9$267_Y [7:3] $flatten\n.\b7.$ternary$src/bcdmapper.v:9$267_Y [1:0] }
      New connections: $flatten\n.\b7.$ternary$src/bcdmapper.v:9$267_Y [2] = $flatten\n.\b7.$ternary$src/bcdmapper.v:9$267_Y [1]
    Consolidated identical input bits for $mux cell $flatten\n.\b8.$ternary$src/bcdmapper.v:9$267:
      Old ports: A=$flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y, B=8'01100110, Y=$flatten\n.\b8.$ternary$src/bcdmapper.v:9$267_Y
      New ports: A={ $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [5] $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [6:5] $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [1] $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [3] $flatten\n.\b8.$ternary$src/bcdmapper.v:10$265_Y [1:0] }, B=7'0110010, Y={ $flatten\n.\b8.$ternary$src/bcdmapper.v:9$267_Y [7:3] $flatten\n.\b8.$ternary$src/bcdmapper.v:9$267_Y [1:0] }
      New connections: $flatten\n.\b8.$ternary$src/bcdmapper.v:9$267_Y [2] = $flatten\n.\b8.$ternary$src/bcdmapper.v:9$267_Y [1]
  Optimizing cells in module \calc.
Performed a total of 53 changes.

12.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.29.6. Executing OPT_DFF pass (perform DFF optimizations).

12.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.29.9. Rerunning OPT passes. (Maybe there is more to do..)

12.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

12.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \calc.
Performed a total of 0 changes.

12.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.29.13. Executing OPT_DFF pass (perform DFF optimizations).

12.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.29.16. Finished OPT passes. (There is nothing left to do.)

12.30. Executing ICE40_WRAPCARRY pass (wrap carries).

12.31. Executing TECHMAP pass (map to technology primitives).

12.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

12.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

12.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $and.
Using extmapper maccmap for cells of type $macc.
  add \agg.l3.bcd_me (4 bits, unsigned)
  sub $auto$wreduce.cc:454:run$1615 [3:0] (4 bits, unsigned)
  add 4'1010 (4 bits, unsigned)
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
  add \agg.l1.bcd_me (4 bits, unsigned)
  sub \agg.l1.operand (4 bits, unsigned)
  add 4'1010 (4 bits, unsigned)
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=7\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
  add \agg.l2.bcd_me (4 bits, unsigned)
  sub $flatten\agg.\l2.$add$src/bcdop.v:25$163_Y (4 bits, unsigned)
  add 4'1010 (4 bits, unsigned)
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
  add \agg.l4.bcd_me (4 bits, unsigned)
  sub $flatten\agg.\l4.$add$src/bcdop.v:25$163_Y (4 bits, unsigned)
  add 4'1010 (4 bits, unsigned)
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=1\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
  add \n.b7.BCD * 3'101 (4x3 bits, unsigned)
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_fa\WIDTH=7 for cells of type $fa.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=4 for cells of type $fa.
No more expansions possible.
<suppressed ~896 debug messages>

12.32. Executing OPT pass (performing simple optimizations).

12.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.
<suppressed ~1348 debug messages>

12.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
<suppressed ~1020 debug messages>
Removed a total of 340 cells.

12.32.3. Executing OPT_DFF pass (perform DFF optimizations).

12.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..
Removed 236 unused cells and 1102 unused wires.
<suppressed ~237 debug messages>

12.32.5. Finished fast OPT passes.

12.33. Executing ICE40_OPT pass (performing simple optimizations).

12.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1688.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1688.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1693.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1693.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1703.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1703.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1717.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1717.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1731.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1731.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1740.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1740.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1749.slice[0].carry: CO=\pp [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1752.slice[7].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1769.slice[4].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1772.slice[0].carry: CO=\n.b8.BCD [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1775.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1740.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1781.slice[0].carry: CO=\mulvalue [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1784.slice[4].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1793.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1731.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1799.slice[4].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1802.slice[0].carry: CO=\n.multiplex [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1811.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1717.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1817.slice[0].carry: CO=\n.pp [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1820.slice[4].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$alumacc.cc:485:replace_alu$1832.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1703.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$maccmap.cc:240:synth$2133.slice[0].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$maccmap.cc:240:synth$2185.slice[0].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$maccmap.cc:240:synth$2456.slice[0].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$maccmap.cc:240:synth$2515.slice[0].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$maccmap.cc:240:synth$2587.slice[0].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$maccmap.cc:240:synth$2587.slice[6].carry: CO=1'0

12.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.
<suppressed ~6 debug messages>

12.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.33.4. Executing OPT_DFF pass (perform DFF optimizations).

12.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..
Removed 6 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

12.33.6. Rerunning OPT passes. (Removed registers in this run.)

12.33.7. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$maccmap.cc:240:synth$2587.slice[1].carry: CO=1'0

12.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.33.10. Executing OPT_DFF pass (perform DFF optimizations).

12.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.33.12. Rerunning OPT passes. (Removed registers in this run.)

12.33.13. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) calc.$auto$maccmap.cc:240:synth$2587.slice[2].carry: CO=1'0

12.33.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.33.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.33.16. Executing OPT_DFF pass (perform DFF optimizations).

12.33.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.33.18. Rerunning OPT passes. (Removed registers in this run.)

12.33.19. Running ICE40 specific optimizations.

12.33.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.33.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.33.22. Executing OPT_DFF pass (perform DFF optimizations).

12.33.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.33.24. Finished OPT passes. (There is nothing left to do.)

12.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

12.35. Executing TECHMAP pass (map to technology primitives).

12.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

12.35.2. Continuing TECHMAP pass.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_SDFFCE_PP1P_ for cells of type $_SDFFCE_PP1P_.
No more expansions possible.
<suppressed ~133 debug messages>

12.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1749.slice[0].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1752.slice[7].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1769.slice[4].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1772.slice[0].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1775.slice[0].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1781.slice[0].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1784.slice[4].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1793.slice[0].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1799.slice[4].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1802.slice[0].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1811.slice[0].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1817.slice[0].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1820.slice[4].carry ($lut).
Mapping calc.$auto$alumacc.cc:485:replace_alu$1832.slice[0].carry ($lut).
Mapping calc.$auto$maccmap.cc:240:synth$2133.slice[0].carry ($lut).
Mapping calc.$auto$maccmap.cc:240:synth$2185.slice[0].carry ($lut).
Mapping calc.$auto$maccmap.cc:240:synth$2456.slice[0].carry ($lut).
Mapping calc.$auto$maccmap.cc:240:synth$2515.slice[0].carry ($lut).
Mapping calc.$auto$maccmap.cc:240:synth$2587.slice[0].carry ($lut).
Mapping calc.$auto$maccmap.cc:240:synth$2587.slice[1].carry ($lut).
Mapping calc.$auto$maccmap.cc:240:synth$2587.slice[2].carry ($lut).
Mapping calc.$auto$maccmap.cc:240:synth$2587.slice[6].carry ($lut).

12.38. Executing ICE40_OPT pass (performing simple optimizations).

12.38.1. Running ICE40 specific optimizations.

12.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.
<suppressed ~453 debug messages>

12.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
<suppressed ~441 debug messages>
Removed a total of 147 cells.

12.38.4. Executing OPT_DFF pass (perform DFF optimizations).

12.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..
Removed 5 unused cells and 834 unused wires.
<suppressed ~6 debug messages>

12.38.6. Rerunning OPT passes. (Removed registers in this run.)

12.38.7. Running ICE40 specific optimizations.

12.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc.

12.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\calc'.
Removed a total of 0 cells.

12.38.10. Executing OPT_DFF pass (perform DFF optimizations).

12.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \calc..

12.38.12. Finished OPT passes. (There is nothing left to do.)

12.39. Executing TECHMAP pass (map to technology primitives).

12.39.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

12.39.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

12.40. Executing ABC pass (technology mapping using ABC).

12.40.1. Extracting gate netlist of module `\calc' to `<abc-temp-dir>/input.blif'..
Extracted 997 gates and 1212 wires to a netlist network with 213 inputs and 186 outputs.

12.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     242.
ABC: Participating nodes from both networks       =     558.
ABC: Participating nodes from the first network   =     248. (  74.92 % of nodes)
ABC: Participating nodes from the second network  =     310. (  93.66 % of nodes)
ABC: Node pairs (any polarity)                    =     248. (  74.92 % of names can be moved)
ABC: Node pairs (same polarity)                   =     187. (  56.50 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

12.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      329
ABC RESULTS:        internal signals:      813
ABC RESULTS:           input signals:      213
ABC RESULTS:          output signals:      186
Removing temp directory.

12.41. Executing ICE40_WRAPCARRY pass (wrap carries).

12.42. Executing TECHMAP pass (map to technology primitives).

12.42.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

12.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 53 unused cells and 792 unused wires.

12.43. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      446
  1-LUT               65
  2-LUT              147
  3-LUT              115
  4-LUT              119

Eliminating LUTs.
Number of LUTs:      446
  1-LUT               65
  2-LUT              147
  3-LUT              115
  4-LUT              119

Combining LUTs.
Number of LUTs:      424
  1-LUT               64
  2-LUT              125
  3-LUT              107
  4-LUT              128

Eliminated 0 LUTs.
Combined 22 LUTs.
<suppressed ~2636 debug messages>

12.44. Executing TECHMAP pass (map to technology primitives).

12.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

12.44.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100001110100101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011001101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101100011000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101001011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011110010011001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110001110011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011100110010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001100100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000110111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011110011111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010000110111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110001101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100110100011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111000001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011011111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000111110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111001000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011010111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010111000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011011001100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110011000110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100001101010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010011100111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010100111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000111111111 for cells of type $lut.
No more expansions possible.
<suppressed ~1675 debug messages>
Removed 0 unused cells and 914 unused wires.

12.45. Executing AUTONAME pass.
Renamed 8941 objects in module calc (38 iterations).
<suppressed ~908 debug messages>

12.46. Executing HIERARCHY pass (managing design hierarchy).

12.46.1. Analyzing design hierarchy..
Top module:  \calc

12.46.2. Analyzing design hierarchy..
Top module:  \calc
Removed 0 unused modules.

12.47. Printing statistics.

=== calc ===

   Number of wires:                375
   Number of wire bits:           1373
   Number of public wires:         375
   Number of public wire bits:    1373
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                671
     SB_CARRY                      136
     SB_DFFE                        44
     SB_DFFESR                      64
     SB_DFFESS                       3
     SB_LUT4                       424

12.48. Executing CHECK pass (checking for obvious problems).
Checking module calc...
Found and reported 0 problems.

12.49. Executing JSON backend.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 2faf6c4250, CPU: user 0.78s system 0.02s, MEM: 58.52 MB peak
Yosys 0.9+4008 (git sha1 83fc5cc2, clang 7.0.1-8+deb10u2 -fPIC -Os)
Time spent: 20% 24x opt_expr (0 sec), 14% 24x opt_clean (0 sec), ...
